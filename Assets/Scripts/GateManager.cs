using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using TMPro;
/*
    This class manages a gate object which contains two different
    gates which has different mathematical operations that can user pass
*/
public class GateManager : MonoBehaviour
{
    // Gate_1 and Gate_2 is the two possible acessable gates in the object
   [SerializeField] public GameObject Gate_1;
   [SerializeField] public GameObject Gate_2;
   // operation_1 and operation_2 is stands for mathematical operation in each possible gate
   public MathFunctionGenerator operation_1;
   public MathFunctionGenerator operation_2;
   [SerializeField] public bool manuelCreation; // Checks if the gate is auto generated or generated manually in the code
   
   /*
   This method works automatically on object is created, 
    and InitiliaseGates to initiliase the gates in the object
   */
    void Start()
    {
        InitiliaseGates();
    }

   /*
   This method is called on every frame, In this scenerio it is used
    in order to check if any collision happened between the relevant gate
    and player's army
   */
    void Update()
    {
        // If collision happened on one of the gates, object disables itself in order to prevent repetitive collisions
        if(Gate_1.GetComponent<Collider>().enabled == false || Gate_2.GetComponent<Collider>().enabled == false)
        {
            print("Gate serie deactivated");
            gameObject.SetActive(false);
        }
    }

   /*
    Initializes the two gates on the object by assigning random mathematical 
     operations that are generated by the Math Function Generator class to these gates
   */
    public void InitiliaseGates()
    {
        //Gets the gates that are assigned to the object on the prefab and puts them on variables
        GateData Gate_1_data = Gate_1.GetComponent<GateData>();
        GateData Gate_2_data = Gate_2.GetComponent<GateData>();   

        // If it is manual gate assigns two gates to add operation if not
        // assigns randomly generated mathematical operations
        if(manuelCreation == false)
        {
            operation_1 = new MathFunctionGenerator();
            operation_2 = new MathFunctionGenerator();
        }    
        else
        {
            operation_1 = new MathFunctionGenerator("Basic","add");
            operation_2 = new MathFunctionGenerator("Basic","add");
        }

        Gate_1_data.operation = operation_1;
        Gate_2_data.operation = operation_2;
    }
}